// APO Loudness FIR Filter Controller for JamesDSP
// This script controls which FIR filter to use based on listening level
// and applies appropriate gain compensation
//
// Note: This script works in conjunction with ConfigFileWatcher
// to dynamically load the correct FIR filter file

desc:Loudness FIR Controller

slider1:60<40,90,1>Listening Level (dB SPL)
slider2:83<70,90,1>Reference Level (dB SPL)
slider3:0<-30,30,0.1>Output Gain (dB)
slider4:1<0,1,1{Off,On}>Enable Loudness
slider5:0<0,100,1>Filter Select (Internal Use)

@init
// Initialize variables
last_listening_level = -1;
last_reference_level = -1;
current_filter_index = -1;
gain_linear = 1.0;

// Define filter mapping
// This maps listening levels to filter indices
// 0: 50.0-77.0_filter.wav (50 dB listening)
// 1: 60.0-83.0_filter.wav (60 dB listening)  
// 2: 70.0-85.0_filter.wav (70 dB listening)
// 3: No filter (loud listening)

function select_filter_index(listening_spl) (
  local(idx);
  
  idx = listening_spl <= 55 ? 0 :
        listening_spl <= 65 ? 1 :
        listening_spl <= 75 ? 2 : 3;
        
  idx
);

// Calculate appropriate gain compensation
function calculate_gain_compensation(listening_spl, reference_spl) (
  local(diff, compensation);
  
  // Basic compensation based on SPL difference
  diff = reference_spl - listening_spl;
  
  // Apply compensation curve (simplified)
  compensation = diff > 20 ? -12 :
                 diff > 10 ? -8 :
                 diff > 0 ? -4 : 0;
                 
  compensation
);

// Convert dB to linear gain
function db_to_linear(db) (
  10^(db/20)
);

@slider
// Update filter selection and gain when sliders change
needs_update = 0;

(slider1 != last_listening_level || slider2 != last_reference_level) ? (
  last_listening_level = slider1;
  last_reference_level = slider2;
  needs_update = 1;
);

// Update gain
gain_linear = db_to_linear(slider3);

@block
// Check if we need to update filter selection
needs_update ? (
  needs_update = 0;
  
  // Select appropriate filter
  new_filter_index = select_filter_index(slider1);
  
  // Update slider5 to communicate filter change
  // This value can be read by ConfigFileWatcher
  (new_filter_index != current_filter_index) ? (
    current_filter_index = new_filter_index;
    slider5 = current_filter_index;
    
    // Calculate automatic gain compensation
    auto_gain = calculate_gain_compensation(slider1, slider2);
    
    // Note: In a real implementation, this would trigger
    // ConfigFileWatcher to load the appropriate FIR filter
  );
);

@sample
// Apply gain if loudness is enabled
slider4 > 0.5 ? (
  spl0 *= gain_linear;
  spl1 *= gain_linear;
) : (
  // Passthrough if disabled
  spl0 = spl0;
  spl1 = spl1;
);

// Note: The actual FIR filtering is done by the Convolver effect
// This script just controls which filter to load and applies gain