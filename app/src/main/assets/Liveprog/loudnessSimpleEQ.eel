// Simple Loudness Compensation with EQ
// Uses parametric EQ instead of FIR filters for lightweight processing

desc:Simple Loudness EQ

slider1:60<40,90,1>Listening Level (dB SPL)
slider2:0<-30,30,0.1>Output Gain (dB)
slider3:1<0,1,1{Off,On}>Enable Loudness
slider4:100<0,100,1>Compensation Amount (%)

@init
// EQ filter memory locations
eq1 = 1000; // 60Hz bass
eq2 = 1100; // 200Hz low-mid
eq3 = 1200; // 1kHz mid (reference)
eq4 = 1300; // 4kHz high-mid
eq5 = 1400; // 10kHz treble

// Initialize biquad filter coefficients storage
function eq_set(mem, freq, q, gain_db) (
  local(omega, sn, cs, alpha, a, a0, a1, a2, b0, b1, b2);
  
  omega = 2 * $pi * freq / srate;
  sn = sin(omega);
  cs = cos(omega);
  alpha = sn / (2 * q);
  a = 10^(gain_db/40);
  
  // Peaking EQ coefficients
  b0 = 1 + alpha * a;
  b1 = -2 * cs;
  b2 = 1 - alpha * a;
  a0 = 1 + alpha / a;
  a1 = -2 * cs;
  a2 = 1 - alpha / a;
  
  // Normalize and store
  mem[0] = b0 / a0;
  mem[1] = b1 / a0;
  mem[2] = b2 / a0;
  mem[3] = -a1 / a0;
  mem[4] = -a2 / a0;
);

// Apply biquad filter
function eq_process(sample, mem) (
  local(y);
  y = sample * mem[0] + mem[5];
  mem[5] = sample * mem[1] + mem[6] - y * mem[3];
  mem[6] = sample * mem[2] - y * mem[4];
  y
);

// Calculate loudness compensation based on listening level
function calculate_compensation() (
  local(ref_level, level_diff);
  
  ref_level = 83; // Reference level in dB SPL
  level_diff = ref_level - slider1;
  
  // Compensation curves (simplified ISO 226)
  // More compensation needed at lower listening levels
  bass_comp = level_diff * 0.15 * (slider4 / 100);    // 60Hz
  lowmid_comp = level_diff * 0.08 * (slider4 / 100);  // 200Hz
  mid_comp = 0;                                        // 1kHz (reference)
  highmid_comp = level_diff * 0.05 * (slider4 / 100); // 4kHz
  treble_comp = level_diff * 0.10 * (slider4 / 100);  // 10kHz
  
  // Limit compensation to reasonable values
  bass_comp = max(-12, min(12, bass_comp));
  lowmid_comp = max(-6, min(6, lowmid_comp));
  highmid_comp = max(-6, min(6, highmid_comp));
  treble_comp = max(-9, min(9, treble_comp));
);

// Convert dB to linear
gain_linear = 10^(slider2/20);

// Initial calculation
calculate_compensation();

@slider
// Recalculate when sliders change
gain_linear = 10^(slider2/20);
calculate_compensation();

// Update EQ filters
eq_set(eq1, 60, 0.7, bass_comp);
eq_set(eq2, 200, 0.7, lowmid_comp);
eq_set(eq3, 1000, 0.7, mid_comp);
eq_set(eq4, 4000, 0.7, highmid_comp);
eq_set(eq5, 10000, 0.7, treble_comp);

@sample
// Process audio
slider3 > 0.5 ? (
  // Apply EQ compensation
  spl0 = eq_process(spl0, eq1);
  spl0 = eq_process(spl0, eq2);
  spl0 = eq_process(spl0, eq3);
  spl0 = eq_process(spl0, eq4);
  spl0 = eq_process(spl0, eq5);
  
  spl1 = eq_process(spl1, eq1 + 10);
  spl1 = eq_process(spl1, eq2 + 10);
  spl1 = eq_process(spl1, eq3 + 10);
  spl1 = eq_process(spl1, eq4 + 10);
  spl1 = eq_process(spl1, eq5 + 10);
);

// Apply output gain
spl0 *= gain_linear;
spl1 *= gain_linear;