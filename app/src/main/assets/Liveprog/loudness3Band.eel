desc: Loudness 3-Band Compensation

slider1:60<40,90,1>Listening Level (dB SPL)
slider2:0<-20,20,1>Output Gain (dB)
slider3:1<0,1,1{Off,On}>Enable
slider4:100<0,100,1>Effect (%)

@init
DB_2_LOG = 0.11512925464970228420089957273422;
// Initialize 3-band splitter (250Hz, 4000Hz crossover)
iirBPS = 0;
reqSize = IIRBandSplitterInit(iirBPS, srate, 250, 4000);
iirBPS2 = iirBPS + reqSize;
reqSize = IIRBandSplitterInit(iirBPS2, srate, 250, 4000);

// Band gains storage
bandGain = iirBPS2 + reqSize;
bandGain[0] = 1; // Low
bandGain[1] = 1; // Mid  
bandGain[2] = 1; // High

// Variables
gainLin = 1;
low1 = 0;
mid1 = 0;
high1 = 0;
low2 = 0;
mid2 = 0;
high2 = 0;

@slider
// Update output gain
gainLin = exp(slider2 * DB_2_LOG);

// Calculate loudness compensation based on listening level
ref_level = 83; // Reference SPL
level_diff = ref_level - slider1;
effect_amount = slider4 / 100;

// Loudness curves: more compensation at lower levels
// Based on simplified ISO 226 curves
bass_comp = level_diff * 0.20 * effect_amount;  // 20% for bass
mid_comp = level_diff * 0.05 * effect_amount;   // 5% for mids
treble_comp = level_diff * 0.12 * effect_amount; // 12% for treble

// Limit compensation
bass_comp = max(-15, min(15, bass_comp));
mid_comp = max(-6, min(6, mid_comp));
treble_comp = max(-12, min(12, treble_comp));

// Convert to linear
bandGain[0] = exp(bass_comp * DB_2_LOG);
bandGain[1] = exp(mid_comp * DB_2_LOG);
bandGain[2] = exp(treble_comp * DB_2_LOG);

@sample
slider3 > 0.5 ? (
  // Split into bands
  IIRBandSplitterProcess(iirBPS, spl0, low1, mid1, high1);
  IIRBandSplitterProcess(iirBPS2, spl1, low2, mid2, high2);
  
  // Apply band gains
  low1 *= bandGain[0];
  mid1 *= bandGain[1];
  high1 *= bandGain[2];
  low2 *= bandGain[0];
  mid2 *= bandGain[1];
  high2 *= bandGain[2];
  
  // Recombine and apply output gain
  spl0 = (low1 + mid1 + high1) * gainLin;
  spl1 = (low2 + mid2 + high2) * gainLin;
) : (
  // Bypass with just output gain
  spl0 *= gainLin;
  spl1 *= gainLin;
);